git -version
$$$$$$$$$$$$$$$$$$$$$$$
git config --global user.name "Salvador Ortega"
git config --global user.email tailmon28@yahoo.com.mx
git config --global core.editor "code --wait"
git config --global -e /* Mostrará la configuración en VS Code */
//El siguiente es dependiendo del sistema operativo para eliminar el comando de espacio CR, Windows=true, Linux/Mac=input
git config --global core.autocrlf true

//lo tipico de entre carpetas comandos ls, mkdir etc.
//luego cuando vayamos a trabajar en una carpeta lo iniciamos
git init
//vital para ver la condicion en que se encuentra nuestro repositorio y archivos
git status
//finalmente empezamos con la primera fase phase con el comando add
//con el comando se usa: 1.-especifico: archivo1.txt 2.-archivos en conjunto: *.txt
//WARNING 3.-todo el directorio:   .
add archivo1.txt
//luego de que verifiquemos que esté correcto a los archivos a comprometer
//Iremos a la siguiente fase Commit
git commit -m "Commit inicial"
//Ahora borraremos un archivo con rm
git rm Archivo1.txt
//Si cambiamos de opinion y queremos revertir los cambios sobre enviar add
git restore --staged archivo1.txt
//Si queremos restaurar los valores que habiamos tenido antes de hacer commit
//Es decir restauramos lo que habiamos modificado
git restore Archivo1.txt
//Lo siguiente es modificar el nombre del archivo
mv Archivo1.txt archivo.txt
//Atención, lo siguiente es afectar a los 2 nombres del archivo del local y del repo
git add Archivo1.txt archivo.txt

//El siguiente método es ignorar ciertos archivos para no afectar nuestro repo
//Creamos un archivo que se llame .gitignore
//Hacemos de cierta manera manejar cierta información sensible de nuestra propiedad ej. Password, Username
//Agregamos el nombre de esos archivos dentro de .gitignore  como algo así:
.env
node_modules/

git status
git add .gitignore
git commit -m "Agregar archivo gitignore"

//!!!Si quieres tener mejor confidencialidad en tu entorno de trabajo puedes escribir
git status -s

//Ahora para observar mas de cerca los cambios realizados usaremos diff
git diff
//Si quieres ver git diff en el area de stage escribe
git diff --staged

//Para mostrar el LOG corto necesitamos escribir
git log --oneline

//Ahora viene lo mejor y es las branch, podemos trabajar en nuestra propia rama
//Ahi no afectamos a la rama principal, master o main
//Creamos nuestra rama:
git checkout -b nombreDeLaRama

//Ahora obsevemos que nos cambiamos a una nueva rama, ahora lo veremos
git branch
//Todos los cambios se reflejarán solo en esa nueva branch, hacemos cambios y guardamos
//Ahora una mirada del contenido rapido del archivo
cat archivo.txt
//Regresamos a la rama principal y observamos que el archivo no sufrió ningun cambio
git checkout master
cat archivo.txt
//Ahora TRAEREMOS LOS CAMBIOS de la ramaB a la Rama master donde nos encontramos
git merge ramaB
cat archivo.txt
//Observamos que se actualiza la rama principal

//Ahora a trabajar con la nube de GitHub
//Nos creamos una cuenta o nos logueamos en GitHub y luego creamos un repositorio
//Hacemos el enlace para trabajar en la nube sobre que origen pertenece
git remote add origin https://github.com/SalvadorOrtegaCastellanos/miweb.git
//Siguiente nos creamos la rama principal en que trabajar en la nube (same name)
git push -u origin master